contract: Text Summary Markdown Output Format
version: 1.0.0
module: text_summarizer
date: 2025-10-02

description: |
  Contract for text summarization with markdown output format.
  Ensures summaries are formatted with proper heading hierarchy and bullet points.

endpoint:
  command: "uv run python -m text_summarizer {file} --format markdown"
  cli_flag: "--format markdown"

input:
  type: text
  format: plain_text
  sources:
    - file
    - stdin
  constraints:
    - must be UTF-8 text
    - must be non-empty
  examples:
    - "document.txt"
    - "cat file.txt | python -m text_summarizer --stdin --format markdown"

output:
  type: text
  format: markdown
  encoding: utf-8

  structure:
    document_title:
      pattern: "# Summary"
      required: true
      level: 1

    summary_content:
      format: paragraphs
      required: true
      notes: "Main summary text with natural paragraph breaks"

    tags_section:
      pattern: "## Tags"
      required: true
      level: 2

    tag_list:
      pattern: "- {tag}"
      format: unordered_list
      required: true
      notes: "Each tag as bullet point"

    metadata_section:
      pattern: "## Metadata"
      required: false
      level: 2
      notes: "Only if --no-metadata not specified"

    metadata_fields:
      format: unordered_list
      fields:
        - "- Input length: {N} words"
        - "- Chunked: {Yes/No}"
        - "- Processing time: {N}s"

validation_rules:
  - name: valid_markdown_syntax
    description: "Output must be syntactically valid markdown"
    test: "Parse with markdown parser without errors"

  - name: heading_hierarchy
    description: "Must have H1 title and H2 subsections"
    test: "Contains single # heading, multiple ## headings"

  - name: tag_list_format
    description: "Tags must be formatted as bullet list"
    test: "Tags section contains '- ' list items"

  - name: non_empty_summary
    description: "Summary text must not be empty"
    test: "Content between title and tags section exists"

  - name: non_empty_tags
    description: "Must have at least one tag"
    test: "Tag list contains >= 1 item"

error_handling:
  empty_input:
    output: "# Error\n\n⚠️ Empty input provided"
    exit_code: 1

  llm_failure:
    output: "# Error\n\n⚠️ Summarization failed: {error}"
    exit_code: 2

  invalid_response:
    output: "# Error\n\n⚠️ LLM returned invalid response"
    exit_code: 3

example_output: |
  # Summary

  This document discusses the implementation of markdown output formats across multiple document processing modules. The key focus is on maintaining consistency while preserving the semantic structure of different source formats including PDFs, images, audio, and text.

  The approach emphasizes human readability alongside machine processing, making the output suitable for LLM consumption while remaining accessible to human readers. Structure preservation is prioritized through careful detection and formatting.

  ## Tags

  - documentation
  - markdown
  - document-processing
  - LLM-integration
  - text-formatting

  ## Metadata

  - Input length: 1250 words
  - Chunked: No
  - Processing time: 2.3s

backward_compatibility:
  - Plain text format (--format plain) must continue to work
  - JSON format (--format json) must continue to work
  - Default format must not change

test_cases:
  - name: simple_text_markdown
    input: "short_text.txt"
    expected:
      - contains: "# Summary"
      - contains: "## Tags"
      - tag_count: ">= 1"

  - name: long_text_markdown
    input: "long_document.txt"
    expected:
      - summary_length: "> 50 words"
      - contains: "## Metadata"
      - chunked: true

  - name: stdin_markdown
    input: "echo 'test text' | ... --stdin --format markdown"
    expected:
      - contains: "# Summary"
      - valid_markdown: true

notes: |
  - Summary text uses natural paragraphs, not forced structure
  - Tags are automatically generated by LLM
  - Metadata section optional based on CLI flag
  - No escaping needed in summary (LLM output is clean)
  - Multiple paragraphs separated by blank lines
